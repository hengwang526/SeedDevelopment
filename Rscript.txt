################### High expression ##################
reads<- read.table("1.normalized reads.txt", header=TRUE)
reads$max<- apply(reads[,2:12],1,max)
dim(high<-reads[reads$max>=500,])  #368 abundant transcript

#quick plot to check 
z<-as.matrix(high[,2:12])
pdf("high.clusterALL.pdf")
plot(hclust(dist(t(z)),method="average")) #euclidean dist, average linkage
dev.off()
#plot pvclust figure
fit<- pvclust(z, method.dist="euclidean")
pdf("high.clusterSig.pv.pdf")
plot(fit)
pvrect(fit, alpha=.95)
dev.off()

#Data Transformation
# average expression
mean<-data.frame(gene=high$gene, dpa10=NA,dpa20=NA,dpa30=NA,dpa40=NA)
mean$dpa10=rowSums(high[,2:4])/3
mean$dpa20=rowSums(high[,5:7])/3
mean$dpa30=rowSums(high[,8:10])/3
mean$dpa40=rowSums(high[,11:12])/2
write.table(mean, file="1.high.mean.txt", sep="\t", row.names=FALSE)
mean[mean==0]=0.0000001  # give some value so I can log2 them
z<-as.matrix(mean[,2:5])
row.names(z) <-mean$gene
#quick check heatmap with scale
library(gplots)
library("RColorBrewer")
pdf("high.heatmap.mean.pdf")
heatmap.2(log(z,2),col=brewer.pal(11,"RdBu"),
            scale="row", trace="none", Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.15,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)
dev.off()  # z-score based
#log2 and Z-score transformation
logVal<-as.matrix(log(mean[,2:5],2))
z<-t(scale(t(logVal)))  #z-score value
row.names(z) <-mean$gene
quantile(rowSums(z))
#           0%           25%           50%           75%          100% 
#-2.009504e-14 -3.330669e-16  0.000000e+00  3.330669e-16  1.354472e-14 

#Clustering based on z-score plot
pdf("high.heatmap.mean.zscore.pdf")
heatmap.2(z,col=brewer.pal(11,"RdBu"),
            scale="none", trace="none", Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.15,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)
dev.off()  #z-score only shown for color but not for cluter!!!!!!
#save the order of genes in text file
list<-read.table("high.heatmap.mean.zscore.txt")
names(list)<-"gene"
list$gene<-as.character(list$gene)
list$clusterN<-368:1
sig<-read.table("List DE genes A and D TM1.txt", header=TRUE,sep="\t")
dim(s10.20<-data.frame(gene= unique(as.character(sig[,1])), s12="sig" ))
dim(s20.30<-data.frame(gene= unique(as.character(sig[,2])), s23="sig" ))
dim(s30.40<-data.frame(gene= unique(as.character(sig[,3])), s34="sig" ))
dim(list.s<-merge(list,s10.20, by="gene", all.x=TRUE))
dim(list.s<-merge(list.s,s20.30, by="gene", all.x=TRUE))
dim(list.s<-merge(list.s,s30.40, by="gene", all.x=TRUE))
list.s<-list.s[order(list.s$clusterN),]
dim(list.s[is.na(list.s$s12) & is.na(list.s$s23) &is.na(list.s$s34),])
# 85 without sig changes
write.table(list.s, file="2.high.sig.txt", sep="\t", row.names=FALSE)
# cut tree
fithc<-hclust(dist(z))
plot(fithc)
rect.hclust(fithc, k=4, border="red")
groups <- cutree(fithc, k=4)
cl4<-data.frame(gene=names(groups), cluster4=as.integer(groups))
plot(fithc)
rect.hclust(fithc, k=12, border="red")
groups <- cutree(fithc, k=12)
cl12<-data.frame(gene=names(groups), cluster12=as.integer(groups))
dim(list<-merge(merge(list.s, cl4, by="gene"),cl12,by="gene"))
list<-list[order(list$clusterN),]
write.table(list, file="2.high.sig.zscore.clusters.txt", sep="\t", row.names=FALSE)
#see if we can do mclust
library(mclust)
Mclust(z) 
#'Mclust' model object: best model: best model: elliposidal multivariate normal (XXX) with 1 components
# not quite structure for likelyhood

#Clustering based on log2
row.names(logVal) <-mean$gene
boxplot(logVal)  #not many <0 values, then remove them for better results
logVal.s <- logVal
logVal.s[logVal.s<0]=0
pdf(file="high.heatmap.log2.pdf")
heatmap.2(logVal.s, col = colorRampPalette(c("white","green","green4","violet","purple"))(100),
          #  hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.15,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)        
dev.off()  #log2 for cluter!!!!!!
panel.cor <- function(x, y, digits=2, prefix="", cex.cor) 
{
    usr <- par("usr"); on.exit(par(usr)) 
    par(usr = c(0, 1, 0, 1)) 
    r <- cor(x, y) 
    txt <- format(c(r, 0.123456789), digits=digits)[1] 
    txt <- paste(prefix, txt, sep="") 
    if(missing(cex.cor)) cex <- 0.8/strwidth(txt) 
    test <- cor.test(x,y) 
    # borrowed from printCoefmat
    Signif <- symnum(test$p.value, corr = FALSE, na = FALSE, 
                  cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
                  symbols = c("***", "**", "*", ".", " ")) 
    text(0.5, 0.5, txt, cex = cex * abs(r)) 
    text(.8, .8, Signif, cex=cex, col=2) 
}
pdf(file="high.cor.log2.pdf")
pairs(logVal.s, lower.panel=function(x,y){points(x,y,type="p",pch=20);abline(lm(y~x))},upper.panel=panel.cor)
dev.off() 

#save the order of hc in file "high.heatmap.log2.txt"
list<-read.table("high.heatmap.log2.txt")
names(list)<-"gene"
list$gene<-as.character(list$gene)
list$clusterN<-368:1
sigHigh<-read.table("2.high.sig.txt", header=TRUE,sep="\t")
sigHigh<-sigHigh[,c(1,3:5)]
# cut tree
fithc<-hclust(dist(logVal.s))
plot(fithc)
rect.hclust(fithc, k=9, border="red")
groups <- cutree(fithc, k=9)
cl9<-data.frame(gene=names(groups), cluster9=as.integer(groups))
dim(list<-merge(merge(list, sigHigh, by="gene", all.x=TRUE),cl9,by="gene"))
list<-list[order(list$clusterN),]
write.table(list, file="2.high.sig.log2.clusters.txt", sep="\t", row.names=FALSE)
#see if we can do mclust


library(mclust)
fit<-Mclust(logVal.s)
fit
#'Mclust' model object: best model: ellipsoidal, equal shape (VEV) with 6 components
pdf("high.mclust.pdf")
plot(fit)
dev.off()
#save the order of hc in file "high.heatmap.log2.txt"
sigHigh<-read.table("2.high.sig.log2.clusters.txt", header=TRUE,sep="\t")
groups <- fit$classification
clM<-data.frame(gene=names(groups), clusterM6=as.integer(groups))
dim(list<-merge(sigHigh,clM, by="gene", all.x=TRUE))
list<-list[order(list$clusterN),]
write.table(list, file="2.high.sig.log2.clusters.txt", sep="\t", row.names=FALSE)


Mclust(t(logVal.s)) #'Mclust' model object: best model: spherical, equal volume (EII) with 3 components
plot(hc(modelName = "EII", data = t(z)))
########################################


################### oil gene expression ##################

#### plot everything first ####### 
library(ggplot2)
library(plyr)
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    require(plyr)

    # New version of length which can handle NA's: if na.rm==T, don't count them
    length2 <- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This is does the summary; it's not easy to understand...
    datac <- ddply(data, groupvars, .drop=.drop,
                   .fun= function(xx, col, na.rm) {
                           c( N    = length2(xx[,col], na.rm=na.rm),
                              mean = mean   (xx[,col], na.rm=na.rm),
                              sd   = sd     (xx[,col], na.rm=na.rm)
                              )
                          },
                    measurevar,
                    na.rm
             )

    # Rename the "mean" column    
    datac <- rename(datac, c("mean"=measurevar))

    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci <- datac$se * ciMult

    return(datac)
}

reads<- read.table("1.normalized reads.txt", header=TRUE)
reads$gene<-as.character(reads$gene)
str(reads)
library(reshape2)
oilssp<-read.table("OilSSP.txt", header=TRUE,sep="\t", stringsAsFactors=FALSE)
for(i in 1:length(oilssp$gene))
{
     test<-reads[grep(oilssp$gene[i],reads$gene),]
     test[3,2:12]<-colSums(test[,2:12])
     test[3,1]<-paste("Total",oilssp$gene[i],sep="")
     long<- melt(test,id.vars="gene",measure.vars=names(test)[2:12],)
     long[,4:5]<-do.call(rbind, strsplit(long$gene,"Gorai."))
     long$variable<-as.character(long$variable)
     long[,6:7]<-do.call(rbind, strsplit(long$variable,"_"))
     long[,8:9]<-do.call(rbind, strsplit(long$V6,"[.]"))
     names(long)[4:9]<-c("genome","locus","temp","rep","accession","DPA")
     id<-paste(as.character(oilssp[i,]), collapse="_")
     SE<-summarySE(na.omit(long),measurevar="value", groupvars=c("genome","DPA"))
     pdf(paste("Figure/",id,".pdf",sep=""), bg = "white") 
     print (ggplot(SE, aes(x=DPA, y=value, group=genome, colour=genome)) +       geom_errorbar(aes(ymin=value-se, ymax=value+se), width=0.5) +
       geom_line() +
       geom_point() +
       ggtitle(id)   #title
    )
       dev.off()
}

for(i in 1:length(oilssp$gene))
{
     test<-reads[grep(oilssp$gene[i],reads$gene),]
     test[3,2:12]<-colSums(test[,2:12])
     test[3,1]<-paste("Total",oilssp$gene[i],sep="")
     long<- melt(test,id.vars="gene",measure.vars=names(test)[2:12],)
     long[,4:5]<-do.call(rbind, strsplit(long$gene,"Gorai."))
     long$variable<-as.character(long$variable)
     long[,6:7]<-do.call(rbind, strsplit(long$variable,"_"))
     long[,8:9]<-do.call(rbind, strsplit(long$V6,"[.]"))
     names(long)[4:9]<-c("genome","locus","temp","rep","accession","DPA")
     id<-paste(as.character(oilssp[i,]), collapse="_")
     long$value=log(long$value+1,2)
     SE<-summarySE(na.omit(long),measurevar="value", groupvars=c("genome","DPA"))
     pdf(paste("Figure_log2/",id,".pdf",sep=""), bg = "white") 
     print (ggplot(SE, aes(x=DPA, y=value, group=genome, colour=genome)) +       geom_errorbar(aes(ymin=value-se, ymax=value+se), width=0.5) +
       geom_line() +
       geom_point() +
       ggtitle(id)   #title
    )
       dev.off()
}
########## try some clustering
reads<- read.table("1.normalized reads.txt", header=TRUE, stringsAsFactors=FALSE)
oil<- read.table("Oilgenes_144.txt", sep="\t", header=TRUE, stringsAsFactors=FALSE)
names(oil)<-c("locus","func")
reads$locus<-gsub("^.","",reads$gene)
dim(oil146<-merge(oil, reads, by="locus") )  #288 abundant transcript

#redundant: Gorai.010G225300; Gorai.013G205300, changed to 144

#Data Transformation
# average expression
mean<-data.frame(gene=oil146$gene, locus=oil146$locus, func=oil146$func, dpa10=NA,dpa20=NA,dpa30=NA,dpa40=NA)
mean$dpa10=rowSums(oil146[,4:6])/3
mean$dpa20=rowSums(oil146[,7:9])/3
mean$dpa30=rowSums(oil146[,10:12])/3
mean$dpa40=rowSums(oil146[,13:14])/2

A<-mean[grep("AGorai",mean$gene),]
D<-mean[grep("DGorai",mean$gene),]
total<-D
total[,4:7]<-A[,4:7]+D[,4:7]
total$gene<-gsub("DGorai","TotalGorai",total$gene)
library(gplots)
library("RColorBrewer")

#log2 hclust heatmap average linkage
y<-as.matrix(A[,4:7])
row.names(y) <-paste(A$gene,A$func)
z<-log(y+1,2)
pdf("oil.A.heatmap.log2.pdf")
heatmap.2(z, col = colorRampPalette(c("white","green","green4","violet","purple"))(100),
            hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.2,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)        
dev.off()
y<-as.matrix(D[,4:7])
row.names(y) <-paste(D$gene,D$func)
z<-log(y+1,2)
pdf("oil.D.heatmap.log2.pdf")
heatmap.2(z, col = colorRampPalette(c("white","green","green4","violet","purple"))(100),
            hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.2,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)        
dev.off()
y<-as.matrix(total[,4:7])
row.names(y) <-paste(total$gene,total$func)
z<-log(y+1,2)
pdf("oil.total.heatmap.log2.pdf")
heatmap.2(z, col = colorRampPalette(c("white","green","green4","violet","purple"))(100),
            hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.2,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)        
dev.off()


#mclust clustering
y<-as.matrix(A[,4:7])
row.names(y) <-paste(A$gene,A$func)
z<-log(y+1,2)
fit<-Mclust(z)  #'Mclust' model object: best model: ellipsoidal, varying volume, shape, and orientation (VVV) with 2 components
fit
pdf("oil.mclust.A.pdf")
plot(fit)
dev.off()
groups <- fit$classification
clA<-data.frame(gene=names(groups), clusterA2=as.integer(groups))
y<-as.matrix(D[,4:7])
row.names(y) <-paste(D$gene,D$func)
z<-log(y+1,2)
fit<-Mclust(z)  
fit  #'Mclust' model object: best model: best model: ellipsoidal, equal shape (VEV) with 5 components
pdf("oil.mclust.D.pdf")
plot(fit)
dev.off()
groups <- fit$classification
clD<-data.frame(gene=names(groups), clusterD5=as.integer(groups))
y<-as.matrix(total[,4:7])
row.names(y) <-paste(total$gene,total$func)
z<-log(y+1,2)
fit<-Mclust(z)  
fit  #'Mclust' model object: best model: ellipsoidal, varying volume, shape, and orientation (VVV) with 2 components
pdf("oil.mclust.total.pdf")
plot(fit)
dev.off()
groups <- fit$classification
clT<-data.frame(gene=names(groups), clusterTotal2=as.integer(groups))

y<-as.matrix(mean[,4:7])
row.names(y) <-paste(mean$gene,mean$func)
z<-log(y+1,2)
fit<-Mclust(z)  
fit  #'Mclust' model object: best model: best model: ellipsoidal, equal shape (VEV) with 4 components
pdf("oil.mclust.A+D.pdf")
plot(fit)
dev.off()
groups <- fit$classification
clAD<-data.frame(gene=names(groups), clusterAD4=as.integer(groups))

dim(list<-merge(clA,clD, by="gene", all.x=TRUE, all.y=TRUE))
dim(list<-merge(list,clAD, by="gene", all.x=TRUE, all.y=TRUE))
list<-list[order(list$clusterAD4),]
write.table(list, file="3.oil.log2.model.clusters.txt", sep="\t", row.names=FALSE)
write.table(clT, file="3.oil.log2.model.Total.clusters.txt", sep="\t", row.names=FALSE)

cl<-clAD
cl[,c(1,3)]<-do.call(rbind, strsplit(as.character(cl$gene)," "))
dim(tt<-merge(cl, mean, by="gene") )

pdf("AndD.clustings.pdf")
for (j in 1:4) {
y<-tt[tt$clusterAD4==j,]
row.names(y) <-paste(y$gene,y$func)
y<-as.matrix(y[,6:9])
z<-log(y+1,2)
heatmap.2(z, col = colorRampPalette(c("white","green","green4","violet","purple"))(100),breaks=seq(0,14,by=0.14),
            hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.2,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01, main=paste("cluster",j))  
plot(c(10,20,30,40),z[1,],type="l",ylim=range(z),xlab="dpa",ylab="log2 RPKM",main=paste("cluster",j))
for(i in 2:dim(z)[1]) 
{lines(c(10,20,30,40),z[i,],type="l", col= ifelse(grepl("^D",rownames(z)[i]),"blue","red"))}
legend(10,max(z), c("At","Dt"), lty = 1, col = c("red","blue") )
}
dev.off()


pdf("oil.mclust.A+D.pdf")
plot(fit)
dev.off()
groups <- fit$classification
clAD<-data.frame(gene=names(groups), clusterAD4=as.integer(groups))


#z-score
y<-as.matrix(total[,4:7])
row.names(y) <-paste(total$gene,total$func)
z<-log(y+1,2)
pdf("oil.total.heatmap.log2-zscore.pdf")
heatmap.2(t(scale(t(z))), col=brewer.pal(11,"RdBu"),
            hclust=function(x) hclust(x,method="average"),
            scale="none", trace="none", density="none",Colv=FALSE,
            keysize=1.0,cexCol= 1,cexRow=0.2,margins=c(5,10),
            colsep=1:20, sepcolor='white', sepwidth=0.01)        
dev.off()

#############
AADDx<-merge( AADD[AADD$V3=="D"], AADD[AADD$V3=="Q"]  , by="gene")
Error in `[.data.frame`(AADD, AADD$V3 == "D") : 
  undefined columns selected
> AADDx<-merge( AADD[AADD$V3=="D"], AADD[AADD$V3=="A"]  , by="gene")
Error in `[.data.frame`(AADD, AADD$V3 == "D") : 
  undefined columns selected
> AADDx<-merge( AADD[AADD$V3=="D",], AADD[AADD$V3=="A",]  , by="gene")
> dim(AADDx)
[1]  0 11
> dim(AADD[AADD$V3=="D",])
[1] 144   6
> AADD[AADD$V3=="D",][1,]
                    gene clusterAD4 V3         V4   V5 clusterAD44
1 DGorai.001G003300 FATB          1  D 001G003300 FATB           1
> AADDx<-merge( AADD[AADD$V3=="D",2:5], AADD[AADD$V3=="A",2:5]  , by="V4")
> dim(AADDx)
[1] 144   7
> AADDx[1,]
          V4 clusterAD4.x V3.x V5.x clusterAD4.y V3.y V5.y
1 001G003300            1    D FATB            4    A FATB
> xtabs(~clusterAD4.x+clusterAD4.y, AADDx)
            clusterAD4.y
clusterAD4.x  1  2  3  4
           1 46  7  0  4
           2  8 32  6  3
           3  1  3  3  3
           4  1  6  0 21
> xtabs(~clusterAD4.y, AADDx)
clusterAD4.y
 1  2  3  4 
56 48  9 31 
> 
##############
